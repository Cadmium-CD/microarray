#include "mbed.h"
#include "N5110.h"

extern "C" void fftR4(short *y, short *x, int N);

float magnitude(short y1, short y2);
void updateSamples();
void doFFT();
void printSpectrum();
void printSamples();
//void ledBarGraph();

int calcPeakFrequency();

AnalogIn audio1(p15);// ADC pin must be biased at Vcc/2 using coupling capacitor and potential divider
AnalogIn audio2(p16);  
AnalogIn audio3(p17);
AnalogIn audio4(p18);
Ticker ticker;
BusOut leds(LED1,LED2,LED3,LED4);
LocalFileSystem local("local");               // Create the local filesystem under the name "local"





#define BUF_LEN 256
#define SAMP_FREQ 10000
#define INTERAL_US 1e6/SAMP_FREQ

short sample1[BUF_LEN];  // store the values read from ADC
short sample2[BUF_LEN]; 
short sample3[BUF_LEN]; 
short sample4[BUF_LEN]; 
short mx1[BUF_LEN*2]; // input data 16 bit, 4 byte aligned  x0r,x0i,x1r,x1i,....
short mx2[BUF_LEN*2]; 
short mx3[BUF_LEN*2]; 
short mx4[BUF_LEN*2]; 
short my1[BUF_LEN*2]; // output data 16 bit,4 byte aligned  y0r,y0i,y1r,y1i,....
short my2[BUF_LEN*2];
short my3[BUF_LEN*2];
short my4[BUF_LEN*2];

float spectrum1[BUF_LEN/2];  // frequency spectrum
float spectrum2[BUF_LEN/2];
float spectrum3[BUF_LEN/2];
float spectrum4[BUF_LEN/2];
unsigned int wp = 0;


//char buffer[14];  // screen buffer

//int tone;

int main()
{
    

    leds = 15;
    wait(3.0);   // short pause to allow coupling capacitor to charge
    leds = 0;
    //printf("END");

    


        updateSamples();  // read in new analog values
        doFFT();          // calc FFT
        //printSpectrum();
        printSamples();
        //tone = calcPeakFrequency();  // calculate peak frequcny and send over serial for debug
    
}


float magnitude(short y1, short y2)
{
    return sqrt(float(y1*y1+y2*y2));  // pythagoras
}



void tickrec(void)
{
    
        sample1[wp] = (short) (audio1.read_u16() - 0x8000);  // read unsigned 16-bit and convert to signed 16-bit (subtract 32768)
        sample2[wp] = (short) (audio2.read_u16() - 0x8000); 
        sample3[wp] = (short) (audio3.read_u16() - 0x8000); 
        sample4[wp] = (short) (audio4.read_u16() - 0x8000); 
        wp ++;
      
}
void updateSamples()
{
    ticker.attach_us(tickrec, INTERAL_US);
    while (wp < BUF_LEN) {
        leds = 12;
        //printf("%d\n",wp);
        }
    ticker.detach();
    leds = 0;
    wp = 0;
}
void initiate_buffer(){
    //clear buffer
    for (int i=0; i<2*BUF_LEN; i++) {
        my1[i] = 0;
        my2[i] = 0;
        my3[i] = 0;
        my4[i] = 0;
        mx1[i] = 0;
        mx2[i] = 0;
        mx3[i] = 0;
        mx4[i] = 0;
    }
    }
void doFFT()
{
    initiate_buffer();
    for (int i=0; i<BUF_LEN; i++) { // load samples in array (skip imaginary input values)
        mx1[i*2]=sample1[i];
        mx2[i*2]=sample2[i];
        mx3[i*2]=sample3[i];
        mx4[i*2]=sample4[i];
    }

    fftR4(my1, mx1, BUF_LEN);  // call FFT routine
    fftR4(my2, mx2, BUF_LEN); 
    fftR4(my3, mx3, BUF_LEN); 
    fftR4(my4, mx4, BUF_LEN); 
    //printf("FFT done\n");
    int j = 0;
    for (int i = 0; i < BUF_LEN; i+=2) {
        spectrum1[j] = magnitude(my1[i],my1[i+1]);  // get magnitude of FFT output to get spectrum data
        spectrum2[j] = magnitude(my2[i],my2[i+1]); 
        spectrum3[j] = magnitude(my3[i],my3[i+1]); 
        spectrum4[j] = magnitude(my4[i],my4[i+1]); 
        j++;
    }
}

void printSpectrum()
{
    
    FILE *fp1 = fopen("/local/fft1.csv","w");
    //now write a CSV file to filesytem of frequency vs amplitude
    int j = 0;
    for (int i = 0; i < BUF_LEN; i+=2) {
        int frequency = int(SAMP_FREQ/BUF_LEN/2*i);  // calculate value of frequency bin
        fprintf(fp1, "%d,%f\n", frequency, spectrum1[j]);
        j++;
    }
    fclose(fp1);
    
    FILE *fp2 = fopen("/local/fft2.csv","w");
    //now write a CSV file to filesytem of frequency vs amplitude
    j = 0;
    for (int i = 0; i < BUF_LEN; i+=2) {
        int frequency = int(SAMP_FREQ/BUF_LEN/2*i);  // calculate value of frequency bin
        fprintf(fp2, "%d,%f\n", frequency, spectrum2[j]);
        j++;
    }
    fclose(fp2);
    
    FILE *fp3 = fopen("/local/fft3.csv","w");
    //now write a CSV file to filesytem of frequency vs amplitude
    j = 0;
    for (int i = 0; i < BUF_LEN; i+=2) {
        int frequency = int(SAMP_FREQ/BUF_LEN/2*i);  // calculate value of frequency bin
        fprintf(fp3, "%d,%f\n", frequency, spectrum3[j]);
        j++;
    }
    fclose(fp3);
    
    FILE *fp4 = fopen("/local/fft4.csv","w");
    //now write a CSV file to filesytem of frequency vs amplitude
    j = 0;
    for (int i = 0; i < BUF_LEN; i+=2) {
        int frequency = int(SAMP_FREQ/BUF_LEN/2*i);  // calculate value of frequency bin
        fprintf(fp4, "%d,%f\n", frequency, spectrum4[j]);
        j++;
    }
    fclose(fp4);
    //printf("start\n");
}

void printSamples()
{
    
    FILE *fp = fopen("/local/samples1.csv","w");
    //now write a CSV file to filesytem of frequency vs amplitude
    for (int i = 0; i < BUF_LEN; i++) {
        fprintf(fp, "%d\n", sample1[i]);
    }
    fclose(fp);
    
    FILE *fp2 = fopen("/local/samples2.csv","w");
    //now write a CSV file to filesytem of frequency vs amplitude
    for (int i = 0; i < BUF_LEN; i++) {
        fprintf(fp, "%d\n", sample2[i]);
    }
    fclose(fp2);
    
    FILE *fp3 = fopen("/local/samples3.csv","w");
    //now write a CSV file to filesytem of frequency vs amplitude
    for (int i = 0; i < BUF_LEN; i++) {
        fprintf(fp3, "%d\n", sample3[i]);
    }
    fclose(fp3);
    
    FILE *fp4 = fopen("/local/samples4.csv","w");
    //now write a CSV file to filesytem of frequency vs amplitude
    for (int i = 0; i < BUF_LEN; i++) {
        fprintf(fp4, "%d\n", sample4[i]);
    }
    fclose(fp4);
    
}

